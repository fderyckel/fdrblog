{
  "hash": "6d5944b74f0c2b55a01674a8435f287d",
  "result": {
    "markdown": "---\ntitle: \"Kmeans with regime changes\"\nauthor: \"Francois de Ryckel\"\ndate: \"2022-10-12\"\ncategories: [kmeans, code, analysis, tidymodel]\neditor: source\n---\n\n\nIdea is to use Kmeans to classify various market regimes. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(readr)\nlibrary(glue)\nlibrary(dplyr)\nthe_path <- here::here()\ndf <- read_csv(glue(the_path, \"/raw_data/intc.csv\"))\nglimpse(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 10,736\nColumns: 7\n$ Date        <dttm> 1980-03-17 05:00:00, 1980-03-18 05:00:00, 1980-03-19 05:0…\n$ Open        <dbl> 0.325521, 0.325521, 0.330729, 0.330729, 0.322917, 0.316406…\n$ High        <dbl> 0.330729, 0.328125, 0.335938, 0.334635, 0.322917, 0.316406…\n$ Low         <dbl> 0.325521, 0.322917, 0.330729, 0.329427, 0.317708, 0.311198…\n$ Close       <dbl> 0.325521, 0.322917, 0.330729, 0.329427, 0.317708, 0.311198…\n$ `Adj Close` <dbl> 0.1907656, 0.1892397, 0.1938178, 0.1930547, 0.1861870, 0.1…\n$ Volume      <dbl> 10924800, 17068800, 18508800, 11174400, 12172800, 8966400,…\n```\n:::\n:::\n\n\n\n\n# Using python \nOriginal blog post \n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport yfinance as yf     #only to download data\ndata  = yf.download(\"INTC\")\ndata.to_csv(\"../../raw_data/intc.csv\")\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nimport pandas as pd\n\npy_df = pd.read_csv(\"../../raw_data/intc.csv\", names = ['date', 'open', 'high', 'low', 'close', 'adj_close', 'volume']).iloc[1: , :]\npy_df.tail()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                            date  ...    volume\n10732  2022-10-06 00:00:00-04:00  ...  33985100\n10733  2022-10-07 00:00:00-04:00  ...  57167100\n10734  2022-10-10 00:00:00-04:00  ...  43409300\n10735  2022-10-11 00:00:00-04:00  ...  48134900\n10736  2022-10-12 00:00:00-04:00  ...  39607800\n\n[5 rows x 7 columns]\n```\n:::\n\n```{.python .cell-code}\npy_df.info()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 10736 entries, 1 to 10736\nData columns (total 7 columns):\n #   Column     Non-Null Count  Dtype \n---  ------     --------------  ----- \n 0   date       10736 non-null  object\n 1   open       10736 non-null  object\n 2   high       10736 non-null  object\n 3   low        10736 non-null  object\n 4   close      10736 non-null  object\n 5   adj_close  10736 non-null  object\n 6   volume     10736 non-null  object\ndtypes: object(7)\nmemory usage: 587.3+ KB\n```\n:::\n\n```{.python .cell-code}\npy_df.shape\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n(10736, 7)\n```\n:::\n\n```{.python .cell-code}\npy_df_melt = py_df.melt(id_vars = 'date', value_vars = ['open', 'high', 'low', 'close'], value_name = 'prices', var_name = 'price_point')\npy_df_melt.info()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 42944 entries, 0 to 42943\nData columns (total 3 columns):\n #   Column       Non-Null Count  Dtype \n---  ------       --------------  ----- \n 0   date         42944 non-null  object\n 1   price_point  42944 non-null  object\n 2   prices       42944 non-null  object\ndtypes: object(3)\nmemory usage: 1006.6+ KB\n```\n:::\n\n```{.python .cell-code}\npy_df_melt.shape\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n(42944, 3)\n```\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nimport talib as ta\n\ncci = ta.CCI(py_df.high, py_df.low, py_df.close, timeperiod = 17)\nht = ta.HT_DCPHASE(py_df.close)\naaron = ta.AROONOSC(py_df.high, py_df.low, timeperiod = 17)\n\nta_df = pd.DataFrame({\"date_time\": py_df['date'].to_list(), \"cci\": cci, \"aaron\":aaron, \"ht\": ht})\nta_df = ta_df.dropna()\npy_df = py_df.loc[ta_df.index, :]   #slicing to get same rows as those in ta_df\n\nta_df.pop(\"date_time\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n64       1980-06-16 00:00:00-04:00\n65       1980-06-17 00:00:00-04:00\n66       1980-06-18 00:00:00-04:00\n67       1980-06-19 00:00:00-04:00\n68       1980-06-20 00:00:00-04:00\n                   ...            \n10732    2022-10-06 00:00:00-04:00\n10733    2022-10-07 00:00:00-04:00\n10734    2022-10-10 00:00:00-04:00\n10735    2022-10-11 00:00:00-04:00\n10736    2022-10-12 00:00:00-04:00\nName: date_time, Length: 10673, dtype: object\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}